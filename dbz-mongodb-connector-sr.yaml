apiVersion: kafka.strimzi.io/v1beta2
kind: KafkaConnector
metadata:
  name: dbz-mongodb-connector
  labels:
    # The strimzi.io/cluster label identifies the KafkaConnect instance
    # in which to create this connector. That KafkaConnect instance
    # must have the strimzi.io/use-connector-resources annotation
    # set to true.
    strimzi.io/cluster: my-connect-single-node-cluster
spec:
  class: io.debezium.connector.mongodb.MongoDbConnector
  tasksMax: 1
  config:
    topic.creation.default.replication.factor: 1
    topic.creation.default.partitions: 1
    # Valid values [compact,delete]
    topic.creation.default.cleanup.policy: compact
    # Valid values ['gzip', 'snappy', 'lz4', 'zstd', 'uncompressed', 'producer']
    topic.creation.default.compression.type: lz4

    mongodb.hosts: example-openshift-mongodb-svc.mongodb.svc.cluster.local:27017

    # Unique name that identifies the connector
    mongodb.name: mongo-dbz-demo
    # Database (authentication source) containing MongoDB credentials
    mongodb.authsource: admin
    # Credentials secret are mounted when KafkaConnect is deployed
    mongodb.user: "${file:/opt/kafka/external-configuration/mongodb-connector-config/myuser-credentials.properties:user}"
    mongodb.password: "${file:/opt/kafka/external-configuration/mongodb-connector-config/myuser-credentials.properties:password}"

    #  Database names to be monitored
    database.include.list: demodb
    tombstones.on.delete: true

    # Service Registry configuration (KEYS)

    key.converter.apicurio.registry.url: http://dbz-apicurioregistry-kafkasql-service:8080/apis/registry/v2

    key.converter: io.apicurio.registry.utils.converter.AvroConverter
    key.converter.apicurio.registry.converter.serializer: io.apicurio.registry.serde.avro.AvroKafkaSerializer

    # Strategy that tries to get the latest schema, based on an artifact ID, and if it does not exist, it creates a new schema.
    key.converter.apicurio.registry.global-id: io.apicurio.registry.utils.serde.strategy.GetOrCreateIdStrategy

    # Specify whether the serializer tries to create an artifact in the registry. The JSON Schema serializer does not support this.
    key.converter.apicurio.registry.auto-register: true

    # Specify whether the serializer tries to find the latest artifact in the registry for the corresponding group ID and artifact ID.
    key.converter.apicurio.registry.find-latest: true

    # Service Registry configuration (VALUES)

    value.converter.apicurio.registry.url: http://dbz-apicurioregistry-kafkasql-service:8080/apis/registry/v2

    value.converter: io.apicurio.registry.utils.converter.AvroConverter
    value.converter.apicurio.registry.converter.serializer: io.apicurio.registry.serde.avro.AvroKafkaSerializer

    # Strategy that tries to get the latest schema, based on an artifact ID, and if it does not exist, it creates a new schema.
    value.converter.apicurio.registry.global-id: io.apicurio.registry.utils.serde.strategy.GetOrCreateIdStrategy

    # Specify whether the serializer tries to create an artifact in the registry. The JSON Schema serializer does not support this.
    value.converter.apicurio.registry.auto-register: true

    # Specify whether the serializer tries to find the latest artifact in the registry for the corresponding group ID and artifact ID.
    value.converter.apicurio.registry.find-latest: true

